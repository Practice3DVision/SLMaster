# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: Windows

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-2019

    steps:
      - name: Install Visual Studio 2019
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Download and extract OpenCV source
        run: |
          Invoke-WebRequest -Uri https://github.com/opencv/opencv/archive/refs/tags/4.5.2.zip -OutFile opencv_4.5.2.zip
          Expand-Archive -Path opencv_4.5.2.zip -DestinationPath .
  
      - name: Configure and build OpenCV
        run: |
          cd opencv-4.5.2
          mkdir build
          cd build
          cmake ..
          cmake --build . --config Release
  
      - name: Install OpenCV
        run: |
          cd build
          cmake --install . --config Release  

      - name: Install Qt
        uses: jurplel/install-qt-action@v3.3.0
        with:
          version: 5.15.2
          host: windows
          target: desktop
          arch: win64_msvc2019_64
          install-deps: true
          archives: qtbase qtsvg qtdeclarative qtgamepad qtgraphicaleffects qtimageformats qtlocation
          set-env: true
    
      - name: Download and extract VTK source
        run: |
            Invoke-WebRequest -Uri https://github.com/Kitware/VTK/archive/refs/tags/v9.2.0.zip -OutFile VTK-9.2.zip
            Expand-Archive -Path VTK-9.2.zip -DestinationPath .

      - name: Configure and build VTK with Qt
        run: |
            cd VTK-9.2
            mkdir build
            cd build
            cmake .. -DVTK_Group_Qt:BOOL=ON
            cmake --build . --config Release

      - name: Install VTK
        run: |
            cd build
            cmake --install . --config Release
    
      - name: Download and extract PCL source
        run: |
            Invoke-WebRequest -Uri https://github.com/PointCloudLibrary/pcl/archive/refs/tags/pcl-1.12.1.zip -OutFile pcl_1.12.1.zip
            Expand-Archive -Path pcl_1.12.1.zip -DestinationPath .
      
      - name: Configure and build PCL with VTK
        run: |
            cd pcl-1.12.1
            mkdir build
            cd build
            cmake .. -DBUILD_visualization:BOOL=ON -DVTK_DIR=C:\Program Files\VTK\lib\cmake\vtk-9.2
            cmake --build . --config Release
      
      - name: Install PCL
        run: |
            cd build
            cmake --install . --config Release
        
      - name: Configure Visual Studio environment
        run: |
            "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\Tools\VsDevCmd.bat"
            set VTK_DIR="C:\Program Files\VTK\lib\cmake\vtk-9.2"
            set PCL_DIR="C:\Program Files\PCL\cmake"
            set OpenCV_DIR="C:\Program Files\OpenCV\x64\vc16\lib"
          
      - uses: actions/checkout@v3
        with:
            submodules: true
  
      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

      - name: Build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}